---
- name: Setup AWS Configuration
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    vpc_cidr_block: "10.0.0.0/16"
    vpc_region: "us-east-1"
    vpc_name: "Nico-vpc"
    status: "present"
    environment: "dev"
    aws_access_key: "AKIAUCIGS7I7YSIXZ3LJ"
    aws_secret_key: "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"
    keypair_ec2: macos
    WebServer_AMI_Centos: ami-002070d43b0a4f171
    Jenkins_ansible_Server_Ubuntu: ami-006e00d6ac75d2ebb
    instance_type_webserver: t2.large
    instance_type_jenkinsAnsible: t2.micro
  tasks:

    # -------- START With Main.tf Conf Setup  ------------ #
    # Create VPC
    - name: Create VPC
      ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpc_cidr_block }}"
        region: "{{ vpc_region }}"
        state: "{{ status }}"
        tags:
          Name: "{{ vpc_name }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: myvpc
      when: "status == 'present'"
    # Print VPC ID
    - name: Print VPC ID
      debug:
        var: myvpc.vpc.id
      when: "status == 'present'"
    # Create Internet Gateway
    - name: Create Internet gateway with tags
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ myvpc.vpc.id }}"
        region: "{{ vpc_region }}"
        state: "{{ status }}"
        tags:
          Name: igw
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: igw
      when: "status == 'present'"
    # Create Sebnet A for VPC
    - name: Create subnet A for VPC
      amazon.aws.ec2_vpc_subnet:
        state: "{{ status }}"
        vpc_id: "{{ myvpc.vpc.id }}"
        cidr: 10.0.1.0/24
        region: "{{ vpc_region }}"
        az: "{{ vpc_region }}a"
        tags:
          Name: subnet-a
          Environment: "{{ environment }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: vpc_subnet_a
      when: "status == 'present'"
    # Create Sebnet B for VPC
    - name: Create subnet B for VPC
      amazon.aws.ec2_vpc_subnet:
        state: "{{ status }}"
        vpc_id: "{{ myvpc.vpc.id }}"
        cidr: 10.0.2.0/24
        region: "{{ vpc_region }}"
        az: "{{ vpc_region }}b"
        tags:
          Name: subnet-b
          Environment: "{{ environment }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: vpc_subnet_b
      when: "status == 'present'"
    # Create Route table that associate with VPC and IGW
    - name: Create Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ myvpc.vpc.id }}"
        region: "{{ vpc_region }}"
        state: "{{ status }}"
        tags:
          Name: gw
          Environment: "{{ environment }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        subnets:
          - "{{ vpc_subnet_a.subnet.id }}"
          - "{{ vpc_subnet_b.subnet.id }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: route_table
      when: "status == 'present'"
    # Create Security Group
    - name: Create security group
      amazon.aws.ec2_group:
        name: SG_WEB
        description: "Security group for my web server"
        region: "{{ vpc_region }}"
        vpc_id: "{{ myvpc.vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: sg_web
      when: "status == 'present'"

      # Create Security Group of Jenkins
      - name: Create security group
      amazon.aws.ec2_group:
        name: SG_Jenkins
        description: "Security group for my web server"
        region: "{{ vpc_region }}"
        vpc_id: "{{ myvpc.vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 8080
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: sg_jenkins
      when: "status == 'present'"
      # Create Security Group For AWS RDS
    - name: Create security group For RDS
      amazon.aws.ec2_group:
        name: nicoSG_For_DB
        description: "Security group for RDS Database"
        region: "{{ vpc_region }}"
        vpc_id: "{{ myvpc.vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 5432
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: rds_sg
      when: "status == 'present'"
    # Create EC2 Instances (Web-Server) in Subnet-A For Nico VPC
    - name: Create EC2 Instances (Web-Server) in Subnet-A
      amazon.aws.ec2_instance:
        name: "nginx-instance-A"
        key_name: "{{ keypair_ec2 }}"
        region: "{{ vpc_region }}"
        state: "{{ status }}"
        vpc_subnet_id: "{{ vpc_subnet_a.subnet.id }}"
        instance_type: "{{ instance_type_webserver }}"
        security_group: "{{ sg_web.group_id }}"
        count: 1
        network:
          assign_public_ip: true
        image_id: "{{ WebServer_AMI_Centos }}"
        tags:
          Environment: Testing
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: ec2_instances_web_a
      when: "status == 'present'"
    # Create EC2 Instances (AnsibleCP-Server) in Subnet-A For Nico VPC
    - name: Create EC2 Instances (AnsibleCP-Server) in Subnet-A
      amazon.aws.ec2_instance:
        name: "jenkinsAnsible-instance-A"
        key_name: "{{ keypair_ec2 }}"
        region: "{{ vpc_region }}"
        state: "{{ status }}"
        vpc_subnet_id: "{{ vpc_subnet_a.subnet.id }}"
        instance_type: "{{ instance_type_jenkinsAnsible }}"
        security_group: "{{ sg_jenkins.group_id }}"
        count: 1
        network:
          assign_public_ip: true
        image_id: "{{ Jenkins_ansible_Server_Ubuntu }}"
        tags:
          Environment: Testing
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: ec2_instances_jenkins_a
      when: "status == 'present'"
    # Create EC2 Instances (Web-Server) in Subnet-B For Nico VPC
    - name: Create EC2 Instances (Web-Server) in Subnet-B
      amazon.aws.ec2_instance:
        name: "nginx-instance-B"
        key_name: "{{ keypair_ec2 }}"
        region: "{{ vpc_region }}"
        state: "{{ status }}"
        vpc_subnet_id: "{{ vpc_subnet_b.subnet.id }}"
        instance_type: "{{ instance_type_webserver }}"
        security_group: "{{ sg_web.group_id }}"
        count: 1
        network:
          assign_public_ip: true
        image_id: "{{ WebServer_AMI_Centos }}"
        tags:
          Environment: Testing
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: ec2_instances_web_b
      when: "status == 'present'"
    # Create LB FOR EC2
    - name: Create LB
      amazon.aws.elb_classic_lb:
        region: "{{ vpc_region }}"
        name: "WebLB"
        state: "{{ status }}"
        security_group_ids: "{{ sg_web.group_id }}"
        subnets: "{{ vpc_subnet_a.subnet.id }}, {{ vpc_subnet_b.subnet.id }}"
        instance_ids: 
          - "{{ ec2_instances_web_a.instances[0].instance_id }}"
          - "{{ ec2_instances_web_b.instances[0].instance_id }}"
        listeners:
        - protocol: http
          load_balancer_port: 80
          instance_port: 80
        stickiness:
          type: application
          enabled: true
          cookie: SESSIONID
        health_check:
          ping_protocol: http # options are http, https, ssl, tcp
          ping_port: 80
          ping_path: "/" # not required for tcp or ssl
          response_timeout: 10 # seconds
          healthy_threshold: 3
          unhealthy_threshold: 3
          interval: 60
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: weblb
      when: "status == 'present'"

    ## ------------- DELETE RESOURCES ---------------- ##

    ## Delete EC2 Instances 
    - name: terminate all running instances
      amazon.aws.ec2_instance:
        region: "{{ vpc_region }}"
        state: absent
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        filters:
          "tag:Environment": Testing
      when: "status == 'absent'"

    ## Delete Load Balancer
    - name: Delete Load Balancer
      local_action:
        module: amazon.aws.elb_classic_lb
        region: "{{ vpc_region }}"
        state: absent
        name: "WebLB"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      when: "status == 'absent'"
    